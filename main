ArrayList<Column> columns = new ArrayList();
float h = 1;//ускорение свободного падения
Bird player;
float score;
int highscore;
PImage Bird_image;
PImage Column_image;
JSONObject json;

void setup(){
size(displayWidth , displayHeight, P2D);
imageMode(CENTER);
//textAlign(CENTER);
Bird_image = loadImage("bird.png");
Column_image = loadImage("column.png");
player = new Bird(80,200);

try{
json = loadJSONObject("data.json");
highscore = json.getInt("highscore");
}catch(Exception e){
json = new JSONObject();
json.setInt("highscore",0);
saveJSONObject(json, "data.json");
}
}

void draw(){
background(0,140,255);
scale(width/278.0,height/500.0);

//create new columns
if(frameCount%60==0){
float Height = random(100,400);
columns.add(new Column(300,0,Height));
columns.add(new Column(300,Height+150,500-(Height+150)));
}

player.update();
if(player.y>700) restart();

for(int i=columns.size()-1; i>=0; i--){
columns.get(i).update();

if(columns.get(i).is_colision(player)){
restart();
break;
}

if(columns.get(i).x<-columns.get(i).size){
columns.remove(i);
score += 0.5;
if(score>highscore){
json.setInt("highscore",int(score));
saveJSONObject(json,"data.json");
highscore = int(score);
}
}
}

fill(255);
textSize(25);
text("Score : "+int(score),0,40);
text("Highscore : " + int(highscore),0,80);

}
void restart(){
columns.clear();
player = new Bird(80,200);
score = 0;
}

class Bird{

float x, y, vx = 3, vy, angle;
int size = 40;

Bird(float x, float y){
this.x = x;
this.y = y;
}

void update(){
draw();

y += vy;
vy += h;
angle += vy/35;

if(keyPressed){
vy = -10*h;
}
}

void draw(){
pushMatrix();
translate(x,y);
rotate(angle);
image(Bird_image,0,0,size*1.3,size*1.3);
popMatrix();
}
}

class Column{

float x, y, Height;
int size = 35;

Column(float x, float y, float Height){
this.x = x;
this.y = y;
this.Height = Height;
}

void update(){
draw();

x -= player.vx;
}

void draw(){
stroke(0,80,0);
strokeWeight(3);
fill(0,170,0);
rect(x,y,size,Height);
}

boolean is_colision(Bird bird){
if(bird.x+bird.size/2>x&&bird.x-bird.size/2<x+size&&bird.y+bird.size/2>y&&bird.y-bird.size/2<y+Height){
return true;
}else{
return false;
}
}
}
